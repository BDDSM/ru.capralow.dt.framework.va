#Область ОписаниеПеременных

Перем СтруктураПрограммногоИнтерфейса, КомментарийПрочитан, ЧтениеПараметров, ПолноеИмяОбъекта,
	СоответствиеОбъектовПодсистемам, ЧтениеВозвращаемыхЗначений, ЧтениеПримера, СтруктураМетода, ЧтениеМетода,
	МетодПрочитан, ТипОбъектаИМенеджер, ДоступностьМетода, ДоступностьИдентификатор;

#КонецОбласти

#Область КомандныйИнтерфейсФормы

&НаКлиенте
Процедура СформироватьОписание(Команда)
	
	СформироватьОписаниеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеНаСервере()
	
	СтруктураПрограммногоИнтерфейса = Новый ТаблицаЗначений;
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("Подсистема");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ПолноеИмяОбъекта");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеМетода");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеПараметров");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеВозвращаемогоЗначения");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеПримера");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("СинтаксисМетода");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("Доступность");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ДоступностьИдентификатор");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("Размещение");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ИмяМетода");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("СинтаксисВызова");
	
	ЛогСозданияОписания = Новый Структура;
	ЛогСозданияОписания.Вставить("ОшибочноПрограммный",  Новый Массив);
	ЛогСозданияОписания.Вставить("ДлинныйКомментарий",   Новый Массив);
	ЛогСозданияОписания.Вставить("ГиперссылкаВКавычках", Новый Массив);
	ЛогСозданияОписания.Вставить("НеНайденаГиперссылка", Новый СписокЗначений);
	ЛогСозданияОписания.Вставить("УстаревшиеМетоды",     Новый Массив);

	ПолноеИмяОбъекта   = "Обработка.ОписаниеАссертов.Форма";

	ПрограммныйИнтерфейсRU = ПрограммныйИнтерфейсМодуля(Объект.ТекстМодуля, "RU");
	ПрограммныйИнтерфейсEN = ПрограммныйИнтерфейсМодуля(Объект.ТекстМодуля, "EN");
	Если Не ЗначениеЗаполнено(ПрограммныйИнтерфейсRU) Или Не ЗначениеЗаполнено(ПрограммныйИнтерфейсEN) Тогда
		Возврат;
	КонецЕсли;
	ПрочитатьПрограммныйИнтерфейсМодуля(ПрограммныйИнтерфейсRU);

	СтруктураПрограммногоИнтерфейсаRU = СтруктураПрограммногоИнтерфейса.Скопировать();
	СтруктураПрограммногоИнтерфейса.Очистить();
	
	ПрочитатьПрограммныйИнтерфейсМодуля(ПрограммныйИнтерфейсEN);

	ОшибочныеСообщения = Новый СообщениеПользователю();
	
	Для Каждого Ошибка Из ЛогСозданияОписания.ОшибочноПрограммный Цикл
		ОшибочныеСообщения.Текст = "Ошибочно программный: " + Ошибка;
		ОшибочныеСообщения.Сообщить();
	КонецЦикла;
	
	Для Каждого Ошибка Из ЛогСозданияОписания.ДлинныйКомментарий Цикл
		ОшибочныеСообщения.Текст = "Длинный комментарий: " + Ошибка;
		ОшибочныеСообщения.Сообщить();
	КонецЦикла;
	
	Для Каждого Ошибка Из ЛогСозданияОписания.ГиперссылкаВКавычках Цикл
		ОшибочныеСообщения.Текст = "Гиперссылка в кавычках: " + Ошибка;
		ОшибочныеСообщения.Сообщить();
	КонецЦикла;
	
	Для Каждого Ошибка Из ЛогСозданияОписания.НеНайденаГиперссылка Цикл
		ОшибочныеСообщения.Текст = "Не найдена гиперссылка: " + Ошибка;
		ОшибочныеСообщения.Сообщить();
	КонецЦикла;
	
	Для Каждого Ошибка Из ЛогСозданияОписания.УстаревшиеМетоды Цикл
		ОшибочныеСообщения.Текст = "Устаревшие методы: " + Ошибка;
		ОшибочныеСообщения.Сообщить();
	КонецЦикла;
	
	Методы = Новый Массив;
	
	ПодсказкиRU = Новый Массив;
	ПодсказкиEN = Новый Массив;
	
	Если СтруктураПрограммногоИнтерфейсаRU.Количество() <> СтруктураПрограммногоИнтерфейса.Количество() Тогда
		ВызватьИсключение "Разное количество методов в английской и русской областях.";
	КонецЕсли;
	
	Для Каждого СтрокаПрограммногоИнтерфейсаRU Из СтруктураПрограммногоИнтерфейсаRU Цикл
		ИндексСтрокиRU = СтруктураПрограммногоИнтерфейсаRU.Индекс(СтрокаПрограммногоИнтерфейсаRU);
		СтрокаПрограммногоИнтерфейсаEN = СтруктураПрограммногоИнтерфейса[ИндексСтрокиRU];
			
		СтруктураМетода = СтруктураМетода(СтрокаПрограммногоИнтерфейсаRU, СтрокаПрограммногоИнтерфейсаEN);
		Методы.Добавить(СтруктураМетода);
		
		ПодсказкаRU = ПодсказкаRU(СтруктураМетода, СтрокаПрограммногоИнтерфейсаRU);
		ПодсказкиRU.Добавить(ПодсказкаRU);
		
		ПодсказкаEN = ПодсказкаEN(СтруктураМетода, СтрокаПрограммногоИнтерфейсаEN);
		ПодсказкиEN.Добавить(ПодсказкаEN);
	КонецЦикла;
	
	ИмяФайлаМетаТипов = Объект.ПутьКПлагину + "/framework/metaTypes.json";
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ОткрытьФайл(ИмяФайлаМетаТипов, , , Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Новый Структура("methods", Методы));
	ЗаписьJSON.Закрыть();
	
	ЗаписатьXMLСписокПодсказок(ПодсказкиRU, "ru");
	ЗаписатьXMLСписокПодсказок(ПодсказкиEN, "en");

	ЗаписатьФайлыПодсказок(ПодсказкиRU, "ru");
	ЗаписатьФайлыПодсказок(ПодсказкиEN, "en");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ТипЕДТПоСтроке(ИмяТипаКонфигуратора)
	
	ИмяТипаЕДТ = "";
	
	Если ИмяТипаКонфигуратора = "Булево" Тогда
		ИмяТипаЕДТ = "Boolean";
		
	ИначеЕсли ИмяТипаКонфигуратора = "Дата" Тогда
		ИмяТипаЕДТ = "Date";
		
	ИначеЕсли ИмяТипаКонфигуратора = "Массив" Тогда
		ИмяТипаЕДТ = "Array";
		
	ИначеЕсли ИмяТипаКонфигуратора = "Произвольный" Тогда
		ИмяТипаЕДТ = "";
		
	ИначеЕсли ИмяТипаКонфигуратора = "Соответствие" Тогда
		ИмяТипаЕДТ = "ReferenceValue";
		
	ИначеЕсли ИмяТипаКонфигуратора = "СписокЗначений" Тогда
		ИмяТипаЕДТ = "TypedValueList";
		
	ИначеЕсли ИмяТипаКонфигуратора = "СпособСравненияФайлов" Тогда
		ИмяТипаЕДТ = "";
		
	ИначеЕсли ИмяТипаКонфигуратора = "СтандартныйПериод" Тогда
		ИмяТипаЕДТ = "";
		
	ИначеЕсли ИмяТипаКонфигуратора = "Строка" Тогда
		ИмяТипаЕДТ = "String";
		
	ИначеЕсли ИмяТипаКонфигуратора = "Структура" Тогда
		ИмяТипаЕДТ = "Structure";
		
	ИначеЕсли ИмяТипаКонфигуратора = "ТабличныйДокумент" Тогда
		ИмяТипаЕДТ = "TableValueList";
		
	ИначеЕсли ИмяТипаКонфигуратора = "Тип" Тогда
		ИмяТипаЕДТ = "Type";
		
	ИначеЕсли ИмяТипаКонфигуратора = "ФиксированноеСоответствие" Тогда
		ИмяТипаЕДТ = "FixedReferenceValue";
		
	ИначеЕсли ИмяТипаКонфигуратора = "ФиксированныйМассив" Тогда
		ИмяТипаЕДТ = "FixedArray";
		
	ИначеЕсли ИмяТипаКонфигуратора = "ФиксированнаяСтруктура" Тогда
		ИмяТипаЕДТ = "FixedStructure";
		
	ИначеЕсли ИмяТипаКонфигуратора = "Число" Тогда
		ИмяТипаЕДТ = "Number";
		
	Иначе
		ВызватьИсключение "Неизвестный тип параметра: " + ИмяТипаКонфигуратора;
		
	КонецЕсли;
	
	Возврат ИмяТипаЕДТ;
	
КонецФункции

&НаСервере
Функция ПараметрыМетода(ОписаниеПараметровRU, ОписаниеПараметровEN, СинтаксисМетода)
	
	ПараметрыМетода = Новый Массив;
	
	МассивПараметровRU = СтрРазделить(ОписаниеПараметровRU, Символы.ПС);
	НовыйМассивПараметровRU = Новый Массив;
	Для Каждого СтрокаПараметра Из МассивПараметровRU Цикл
		Если Лев(СтрокаПараметра, 3) = "   " Тогда
			НовыйМассивПараметровRU.Добавить(Сред(СтрокаПараметра, 4));
			
		Иначе
			ИндексПоследнейСтроки = НовыйМассивПараметровRU.Количество() - 1;
			НовыйМассивПараметровRU.Вставить(ИндексПоследнейСтроки,
				НовыйМассивПараметровRU[ИндексПоследнейСтроки] + СтрокаПараметра);
			
		КонецЕсли;
	КонецЦикла;
	
	МассивПараметровEN = СтрРазделить(ОписаниеПараметровRU, Символы.ПС);
	НовыйМассивПараметровEN = Новый Массив;
	Для Каждого СтрокаПараметра Из МассивПараметровEN Цикл
		Если Лев(СтрокаПараметра, 3) = "   " Тогда
			НовыйМассивПараметровEN.Добавить(Сред(СтрокаПараметра, 4));
			
		Иначе
			ИндексПоследнейСтроки = НовыйМассивПараметровEN.Количество() - 1;
			НовыйМассивПараметровEN.Вставить(ИндексПоследнейСтроки,
				НовыйМассивПараметровEN[ИндексПоследнейСтроки] + СтрокаПараметра);
			
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПараметровБезОписания	= 2;
	КоличествоПараметровСОписанием	= 3;
	
	Для Каждого СтрокаПараметраRU Из НовыйМассивПараметровRU Цикл
		УточненнаяСтрокаПараметраRU = СтрЗаменить(СтрокаПараметраRU, " - ", "|");
		МассивСтрокиПараметраRU = СтрРазделить(УточненнаяСтрокаПараметраRU, "|");

		СтрокаПараметраEN = НовыйМассивПараметровEN.Получить(НовыйМассивПараметровRU.Найти(СтрокаПараметраRU));
		УточненнаяСтрокаПараметраEN = СтрЗаменить(СтрокаПараметраEN, " - ", "|");
		МассивСтрокиПараметраEN = СтрРазделить(УточненнаяСтрокаПараметраEN, "|");

		Если МассивСтрокиПараметраRU.Количество() < КоличествоПараметровБезОписания Тогда
			Продолжить;
		КонецЕсли;

		ИмяПараметраRU = МассивСтрокиПараметраRU[0];
		ИмяПараметраEN = МассивСтрокиПараметраEN[0];

		ЕстьЗначениеПоУмолчанию	= СтрНайти(СинтаксисМетода, ИмяПараметраRU + " = ") <> 0;
		ЕстьЗнач				= СтрНайти(ВРег(СинтаксисМетода), ВРег("Знач " + ИмяПараметраRU)) <> 0;

		СтруктураПараметра = Новый Соответствие;
		
		Если ЕстьЗначениеПоУмолчанию Тогда
			СтруктураПараметра.Вставить("isDefaultValue",	Истина);
		КонецЕсли;
		Если ЕстьЗнач Тогда
			СтруктураПараметра.Вставить("isOut",			Истина);
		КонецЕсли;
		
		Если МассивСтрокиПараметраRU.Количество() = КоличествоПараметровСОписанием Тогда
			СтруктураПараметра.Вставить("type-descr-ru",	СокрЛП(МассивСтрокиПараметраRU[2]));
		КонецЕсли;
		Если МассивСтрокиПараметраEN.Количество() = КоличествоПараметровСОписанием Тогда
			СтруктураПараметра.Вставить("type-descr-en",	СокрЛП(МассивСтрокиПараметраEN[2]));
		КонецЕсли;

		ИмяТипаКонфигуратора = СокрЛП(МассивСтрокиПараметраRU[1]);
		Если СтрНайти(ИмяТипаКонфигуратора, ",") = 0 Тогда
			ИмяТипаЕДТ = ТипЕДТПоСтроке(ИмяТипаКонфигуратора);
			Если Не ПустаяСтрока(ИмяТипаЕДТ) Тогда
				СтруктураПараметра.Вставить("type",			ИмяТипаЕДТ);
				СтруктураПараметра.Вставить("type-name-ru",	ИмяТипаКонфигуратора);
				СтруктураПараметра.Вставить("type-name-en",	ИмяТипаКонфигуратора);
			КонецЕсли;
			
		Иначе
			МассивТипов = Новый Массив;
			Для Каждого СоставнойТип Из СтрРазделить(ИмяТипаКонфигуратора, ",") Цикл
				ИмяТипаЕДТ = ТипЕДТПоСтроке(СокрЛП(СоставнойТип));
				Если Не ПустаяСтрока(ИмяТипаЕДТ) Тогда
					МассивТипов.Добавить(ИмяТипаЕДТ);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивТипов.Количество() <> 0 Тогда
				СтруктураПараметра.Вставить("types",	МассивТипов);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПараметра.Вставить("name-ru",	ИмяПараметраRU);
		СтруктураПараметра.Вставить("name-en",	ИмяПараметраEN);

		ПараметрыМетода.Добавить(СтруктураПараметра);
	КонецЦикла;
	
	Возврат ПараметрыМетода;
	
КонецФункции

&НаСервере
Функция СтруктураМетода(СтрокаПрограммногоИнтерфейсаRU, СтрокаПрограммногоИнтерфейсаEN)
	
	ПараметрыМетода = ПараметрыМетода(
		СтрокаПрограммногоИнтерфейсаRU.ОписаниеПараметров,
		СтрокаПрограммногоИнтерфейсаEN.ОписаниеПараметров,
		СтрокаПрограммногоИнтерфейсаRU.СинтаксисМетода);

	ИмяТипаВозвращаемогоЗначения = "";
	Если Не ПустаяСтрока(СтрокаПрограммногоИнтерфейсаRU.ОписаниеВозвращаемогоЗначения) Тогда
		ИмяТипаВозвращаемогоЗначения = ТипЕДТПоСтроке("Структура");
	КонецЕсли;

	СтруктураМетода = Новый Соответствие;
	Если Не ПустаяСтрока(ИмяТипаВозвращаемогоЗначения) Тогда
		СтруктураМетода.Вставить("returnedValue",	ИмяТипаВозвращаемогоЗначения);
	КонецЕсли;
	СтруктураМетода.Вставить("params",				ПараметрыМетода);
	СтруктураМетода.Вставить("name-ru",				СтрокаПрограммногоИнтерфейсаRU.ИмяМетода);
	СтруктураМетода.Вставить("name-en",				СтрокаПрограммногоИнтерфейсаEN.ИмяМетода);
	
	Возврат СтруктураМетода;
	
КонецФункции

&НаСервере
Функция ПодсказкаRU(СтруктураМетода, СтрокаПрограммногоИнтерфейса)
	
	HTMLШаблон =
	"<html>
	|	<body>
	|		<h2><em>Имя метода:</em> <a name=""Name""/>&ИмяМетода<a name=""Name.End""/></h2>
	|
	|		<h3><em>Синтаксис:</em></h3>
	|		<p><a name=""Syntax""/>&Синтаксис<a name=""Syntax.End""/></p>
	|
	|		<h3><em>Описание:</em></h3>
	|		<p><a name=""Descr""/>&Описание<a name=""Descr.End""/></p>
	|
	|&ВозвращаемоеЗначение
	|
	|		<h3><em>Параметры:</em></h3>
	|		<a name=""Parameters""/>
	|			&Параметры
	|		<a name=""Parameters.End""/>
	|
	|		<h3><em>Доступность:</em></h3>
	|		<ul><a name=""Envs""/>
	|			<li>Сервер</li>
	|			<li>Тонкий клиент</li>
	|			<li>Толстый клиент (управляемое приложение)</li>
	|			<li>Толстый клиент (обычное приложение)</li>
	|		<a name=""Envs.End""/></ul>
	|
	|		<h3><em>Пример:</em></h3>
	|		<p><a name=""Example""/>&Пример<a name=""Example.End""/></p>
	|
	|&Примечание
	|
	|&Ссылка
	|	</body>
	|</html>";
	
	ВозвращаемоеЗначениеШаблон =
	"		<h3><em>Тип возвращаемого значения:&nbsp;</em></h3>
	|		<ul><a name=""RetValTypes""/><a name=""RetValTypes.End""/></ul>
	|
	|		<h3><em>Описание возвращаемого значения:&nbsp;</em></h3>
	|		<p><a name=""RetValDescr""/>&ОписаниеВозвращаемогоЗначения<a name=""RetValDescr.End""/></p>
	|";
	
	ТипШаблон =
	"<a name=""Type""/><a href=""&ИмяТипаЕДТ.htm"">&ИмяТипаКонфигуратор</a><a name=""Type.End""/>";
	
	ПараметрШаблон =
	"<a name=""Param&ИндексПараметра""/><ul><li><strong>&ИмяПараметра</strong> &nbsp;(&Обязательность).</li></ul><p style=""margin-left: 40px;""><strong>Тип</strong>:&nbsp;&ТипПараметра.</p><p style=""margin-left: 40px;""><strong>Описание</strong>: <a name=""DescrParam""/>&ОписаниеПараметра<a name=""DescrParam.End""/></p><a name=""Param&ИндексПараметра.End""/>";
	
	ПримечаниеШаблон =
	"		<h3><em>Примечание:</em></h3>
	|		<p><a name=""Remark""/>&Примечание<a name=""Remark.End""/></p>
	|";
	
	СсылкаШаблон =
	"		<div style=""display:none"">
	|			<a name=""MethodicalLink""/>&Ссылка<a name=""MethodicalLink.End""/>
	|		</div>
	|";
	
	HTMLТекст = HTMLШаблон;
	
	ИмяМетода = СтруктураМетода["name-ru"];
	
	Синтаксис = СтрокаПрограммногоИнтерфейса.СинтаксисМетода;
	Синтаксис = СтрЗаменить(Синтаксис, "Функция ", "");
	Синтаксис = СтрЗаменить(Синтаксис, "Процедура ", "");
	Синтаксис = СтрЗаменить(Синтаксис, " Экспорт", "");
	
	Описание = СтрокаПрограммногоИнтерфейса.ОписаниеМетода;
	
	ВозвращаемоеЗначениеТекст = "";
	Если Не ПустаяСтрока(СтрокаПрограммногоИнтерфейса.ОписаниеВозвращаемогоЗначения) Тогда
		ВозвращаемоеЗначениеТекст = ВозвращаемоеЗначениеШаблон;
		ВозвращаемоеЗначениеТекст = СтрЗаменить(ВозвращаемоеЗначениеТекст,
			"&ОписаниеВозвращаемогоЗначения", СтрокаПрограммногоИнтерфейса.ОписаниеВозвращаемогоЗначения);
	КонецЕсли;
	
	ПараметрыТекст = "";
	ИндексПараметра = 0;
	Для Каждого Параметр Из СтруктураМетода["params"] Цикл
		Обязательность = "Обязательный";
		Если Параметр.Получить("isDefaultValue") <> Неопределено Тогда
			Обязательность = "Необязательный";
		КонецЕсли;
		
		ТипПараметра = ТипШаблон;
		
		ИмяТипаЕДТ			= Параметр["type"];
		ИмяТипаКонфигуратор	= Параметр["type-name-ru"];
		ОписаниеПараметра	= Параметр["type-descr-ru"];
		
		ПараметрТекст = ПараметрШаблон;
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ИндексПараметра",		ИндексПараметра);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ИмяПараметра",			Параметр["name-ru"]);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&Обязательность",		Обязательность);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ТипПараметра",			ТипПараметра);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ИмяТипаЕДТ",			ИмяТипаЕДТ);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ИмяТипаКонфигуратор",	ИмяТипаКонфигуратор);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ОписаниеПараметра",	ОписаниеПараметра);
		
		ПараметрыТекст = ПараметрыТекст + ПараметрТекст;
		ИндексПараметра = ИндексПараметра + 1;
	КонецЦикла;
	
	Пример = СтрокаПрограммногоИнтерфейса.СинтаксисВызова;
	
	ПримечаниеТекст = "";
	Если Ложь Тогда
		ПримечаниеТекст = ПримечаниеШаблон;
	КонецЕсли;
	
	СсылкаТекст = "";
	Если Ложь Тогда
		СсылкаТекст = СсылкаШаблон;
	КонецЕсли;
	
	HTMLТекст = СтрЗаменить(HTMLТекст, "&ИмяМетода", ИмяМетода);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Синтаксис", Синтаксис);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Описание", Описание);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&ВозвращаемоеЗначение", ВозвращаемоеЗначениеТекст);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Параметры", ПараметрыТекст);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Пример", Пример);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Примечание", ПримечаниеТекст);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Ссылка", СсылкаТекст);
	
	СтруктураПодсказки = Новый Соответствие;
	
	ИмяМетодаСКоличествомПараметров = СтруктураМетода["name-en"] + Строка(СтруктураМетода["params"].Количество());
	
	СтруктураПодсказки.Вставить("id",			"TestFramework#" + ИмяМетодаСКоличествомПараметров);
	СтруктураПодсказки.Вставить("title",		ИмяМетода);
	СтруктураПодсказки.Вставить("description",	Описание);
	СтруктураПодсказки.Вставить("topic_href",	"html/TestFramework." + ИмяМетодаСКоличествомПараметров + ".htm");
	СтруктураПодсказки.Вставить("topic_label",	ИмяМетода);
	СтруктураПодсказки.Вставить("html",			HTMLТекст);
	
	Возврат СтруктураПодсказки;
	
КонецФункции

&НаСервере
Функция ПодсказкаEN(СтруктураМетода, СтрокаПрограммногоИнтерфейса)
	
	HTMLШаблон =
	"<html>
	|	<body>
	|		<h2><em>Имя метода:</em> <a name=""Name""/>&ИмяМетода<a name=""Name.End""/></h2>
	|
	|		<h3><em>Синтаксис:</em></h3>
	|		<p><a name=""Syntax""/>&Синтаксис<a name=""Syntax.End""/></p>
	|
	|		<h3><em>Описание:</em></h3>
	|		<p><a name=""Descr""/>&Описание<a name=""Descr.End""/></p>
	|
	|&ВозвращаемоеЗначение
	|
	|		<h3><em>Параметры:</em></h3>
	|		<a name=""Parameters""/>
	|			&Параметры
	|		<a name=""Parameters.End""/>
	|
	|		<h3><em>Доступность:</em></h3>
	|		<ul><a name=""Envs""/>
	|			<li>Сервер</li>
	|			<li>Тонкий клиент</li>
	|			<li>Толстый клиент (управляемое приложение)</li>
	|			<li>Толстый клиент (обычное приложение)</li>
	|		<a name=""Envs.End""/></ul>
	|
	|		<h3><em>Пример:</em></h3>
	|		<p><a name=""Example""/>&Пример<a name=""Example.End""/></p>
	|
	|&Примечание
	|
	|&Ссылка
	|	</body>
	|</html>";
	
	ВозвращаемоеЗначениеШаблон =
	"		<h3><em>Тип возвращаемого значения:&nbsp;</em></h3>
	|		<ul><a name=""RetValTypes""/><a name=""RetValTypes.End""/></ul>
	|
	|		<h3><em>Описание возвращаемого значения:&nbsp;</em></h3>
	|		<p><a name=""RetValDescr""/>&ОписаниеВозвращаемогоЗначения<a name=""RetValDescr.End""/></p>
	|";
	
	ТипШаблон =
	"<a name=""Type""/><a href=""Boolean.htm"">Булево</a><a name=""Type.End""/>";
	
	ПараметрШаблон =
	"<a name=""Param&ИндексПараметра""/><ul><li><strong>&ИмяПараметра</strong> &nbsp;(&Обязательность).</li></ul><p style=""margin-left: 40px;""><strong>Тип</strong>:&nbsp;&ТипПараметра.</p><p style=""margin-left: 40px;""><strong>Описание</strong>: <a name=""DescrParam""/>&ОписаниеПараметра<a name=""DescrParam.End""/></p><a name=""Param&ИндексПараметра.End""/>";
	
	ПримечаниеШаблон =
	"		<h3><em>Примечание:</em></h3>
	|		<p><a name=""Remark""/>&Примечание<a name=""Remark.End""/></p>
	|";
	
	СсылкаШаблон =
	"		<div style=""display:none"">
	|			<a name=""MethodicalLink""/>&Ссылка<a name=""MethodicalLink.End""/>
	|		</div>
	|";
	
	HTMLТекст = HTMLШаблон;
	
	ИмяМетода = СтруктураМетода["name-en"];
	
	Синтаксис = СтрокаПрограммногоИнтерфейса.СинтаксисМетода;
	Синтаксис = СтрЗаменить(Синтаксис, "Function ", "");
	Синтаксис = СтрЗаменить(Синтаксис, "Procedure ", "");
	Синтаксис = СтрЗаменить(Синтаксис, " Export", "");
	
	Описание = СтрокаПрограммногоИнтерфейса.ОписаниеМетода;
	
	ВозвращаемоеЗначениеТекст = "";
	Если Не ПустаяСтрока(СтрокаПрограммногоИнтерфейса.ОписаниеВозвращаемогоЗначения) Тогда
		ВозвращаемоеЗначениеТекст = ВозвращаемоеЗначениеШаблон;
		ВозвращаемоеЗначениеТекст = СтрЗаменить(ВозвращаемоеЗначениеТекст,
			"&ОписаниеВозвращаемогоЗначения", СтрокаПрограммногоИнтерфейса.ОписаниеВозвращаемогоЗначения);
	КонецЕсли;
	
	ПараметрыТекст = "";
	ИндексПараметра = 0;
	Для Каждого Параметр Из СтруктураМетода["params"] Цикл
		Обязательность = "Обязательный";
		Если Параметр.Получить("isDefaultValue") <> Неопределено Тогда
			Обязательность = "Необязательный";
		КонецЕсли;
		
		ТипПараметра = ТипШаблон;
		
		ИмяТипаЕДТ			= Параметр["type"];
		ИмяТипаКонфигуратор	= Параметр["type-name-en"];
		ОписаниеПараметра	= Параметр["type-descr-en"];
		
		ПараметрТекст = ПараметрШаблон;
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ИндексПараметра",		ИндексПараметра);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ИмяПараметра",			Параметр["name-en"]);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&Обязательность",		Обязательность);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ТипПараметра",			ТипПараметра);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ИмяТипаЕДТ",			ИмяТипаЕДТ);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ИмяТипаКонфигуратор",	ИмяТипаКонфигуратор);
		ПараметрТекст = СтрЗаменить(ПараметрТекст, "&ОписаниеПараметра",	ОписаниеПараметра);
		
		ПараметрыТекст = ПараметрыТекст + ПараметрТекст;
		ИндексПараметра = ИндексПараметра + 1;
	КонецЦикла;
	
	Пример = СтрокаПрограммногоИнтерфейса.СинтаксисВызова;
	
	ПримечаниеТекст = "";
	Если Ложь Тогда
		ПримечаниеТекст = ПримечаниеШаблон;
	КонецЕсли;
	
	СсылкаТекст = "";
	Если Ложь Тогда
		СсылкаТекст = СсылкаШаблон;
	КонецЕсли;
	
	HTMLТекст = СтрЗаменить(HTMLТекст, "&ИмяМетода", ИмяМетода);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Синтаксис", Синтаксис);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Описание", Описание);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&ВозвращаемоеЗначение", ВозвращаемоеЗначениеТекст);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Параметры", ПараметрыТекст);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Пример", Пример);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Примечание", ПримечаниеТекст);
	HTMLТекст = СтрЗаменить(HTMLТекст, "&Ссылка", СсылкаТекст);
	
	СтруктураПодсказки = Новый Соответствие;
	
	ИмяМетодаСКоличествомПараметров = СтруктураМетода["name-en"] + Строка(СтруктураМетода["params"].Количество());
	
	СтруктураПодсказки.Вставить("id",			"TestFramework#" + ИмяМетодаСКоличествомПараметров);
	СтруктураПодсказки.Вставить("title",		ИмяМетода);
	СтруктураПодсказки.Вставить("description",	Описание);
	СтруктураПодсказки.Вставить("topic_href",	"html/TestFramework." + ИмяМетодаСКоличествомПараметров + ".htm");
	СтруктураПодсказки.Вставить("topic_label",	ИмяМетода);
	СтруктураПодсказки.Вставить("html",			HTMLТекст);
	
	Возврат СтруктураПодсказки;
	
КонецФункции

&НаСервере
Процедура ЗаписатьXMLСписокПодсказок(Подсказки, КодЯзыка)

	ИмяФайлаПодсказка = Объект.ПутьКПлагину + "/nl/" + КодЯзыка + "/bslTestFramework.xml";
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайлаПодсказка);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("contexts");
	Для Каждого Подсказка Из Подсказки Цикл
		Для ВерсияПлатформы = 8 По Объект.МаксимальнаяВерсияПлатформы Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("context");
			ЗаписьXML.ЗаписатьАтрибут("id", "v8_3_" + ВерсияПлатформы + "$" + Подсказка["id"]);
			ЗаписьXML.ЗаписатьАтрибут("title", Подсказка["title"]);
			ЗаписьXML.ЗаписатьНачалоЭлемента("description");
			ЗаписьXML.ЗаписатьТекст(Подсказка["description"]);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // description
			ЗаписьXML.ЗаписатьНачалоЭлемента("topic");
			ЗаписьXML.ЗаписатьАтрибут("topic_href", Подсказка["topic_href"]);
			ЗаписьXML.ЗаписатьАтрибут("topic_label", Подсказка["topic_label"]);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // topic
			ЗаписьXML.ЗаписатьКонецЭлемента(); // context
		КонецЦикла;
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); // contexts
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФайлыПодсказок(Подсказки, КодЯзыка)
	
	Текст = Новый ТекстовыйДокумент;
	
	ПутьККаталогу = Объект.ПутьКПлагину + "/nl/" + КодЯзыка + "/html/";
	УдалитьФайлы(ПутьККаталогу, "*");
	
	Для Каждого Подсказка Из Подсказки Цикл
		ИмяФайлаПодсказка = ПутьККаталогу + СтрЗаменить(Подсказка["id"], "#", ".") + ".htm";
		
		Текст.УстановитьТекст(Подсказка["html"]);
		Текст.Записать(ИмяФайлаПодсказка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрограммныйИнтерфейсМодуля(ТекстМодуля, КодЯзыка)
	
	ОбластьПрограммногоИнтерфейса = ОбластьПрограммногоИнтерфейса(КодЯзыка);
	
	НачалоОбласти = СтрНайти(ТекстМодуля, ОбластьПрограммногоИнтерфейса);
	Если НачалоОбласти = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	НачалоОбластиАПИ = НачалоОбласти + СтрДлина(ОбластьПрограммногоИнтерфейса);
	КонецОбластиАПИ  = Неопределено;
	
	НомерВхождения = 1;
	Пока КонецОбластиАПИ = Неопределено Цикл
		НачалоОбласти = СтрНайти(ТекстМодуля, НачалоОбласти(), , НачалоОбластиАПИ, НомерВхождения);
		КонецОбласти  = СтрНайти(ТекстМодуля, КонецОбласти(), , НачалоОбластиАПИ, НомерВхождения);
		
		Если НачалоОбласти > 0 И НачалоОбласти < КонецОбласти Тогда
			НомерВхождения = НомерВхождения + 1;
		Иначе
			КонецОбластиАПИ = КонецОбласти;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьАПИ = Сред(ТекстМодуля, НачалоОбластиАПИ, КонецОбластиАПИ - НачалоОбластиАПИ);
	
	Возврат ОбластьАПИ;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПрограммныйИнтерфейсМодуля(Знач ПрограммныйИнтерфейс)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ПрограммныйИнтерфейс);
	
	УстановитьПеременные();
	Для Итератор = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
		Если ЧтениеМетода Тогда
			Если СтрНайти(Строка, "КонецПроцедуры") > 0 Или СтрНайти(Строка, "КонецФункции") > 0 Тогда
				// Чтение тела процедуры или функции завершено.
				УстановитьПеременные();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Строка, "#Область УстаревшиеПроцедурыИФункции") > 0
			Или СтрНайти(Строка, "#Область ДляВызоваИзДругихПодсистем") > 0 Тогда
			ВложенностьОбластей = 0;
			Пока Истина Цикл
				Если СтрНайти(Строка, "#Область ") > 0 Тогда
					ВложенностьОбластей = ВложенностьОбластей + 1;
				ИначеЕсли СтрНайти(Строка, "#КонецОбласти") > 0 Тогда
					ВложенностьОбластей = ВложенностьОбластей - 1;
				КонецЕсли;
				
				Если СтрНайти(Строка, "#КонецОбласти") <> 0 И ВложенностьОбластей = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Итератор = Итератор + 1;
				Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(Строка) Тогда
			Продолжить;
		ИначеЕсли Лев(Строка, 2) = "//" Тогда
			СтруктураМетода.Вставить("ДлинаОписания", 0);
			ПрочитатьКомментарийИМетод(Строка, ТекстовыйДокумент, Итератор);
			СтруктураМетода.Удалить("ДлинаОписания");
		КонецЕсли;
		Если КомментарийПрочитан И ЧтениеМетода Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПрограммногоИнтерфейса.Добавить(), СтруктураМетода);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбластьПрограммногоИнтерфейса(КодЯзыка)
	Возврат НачалоОбласти() + " " + Объект["ОбластьАссертов" + КодЯзыка];
КонецФункции

&НаСервере
Функция НачалоОбласти()
	Возврат "#Область";
КонецФункции

&НаСервере
Функция КонецОбласти()
	Возврат "#КонецОбласти";
КонецФункции

&НаСервере
Процедура УстановитьПеременные()
	
	КомментарийПрочитан        = Ложь;
	ЧтениеПараметров           = Ложь;
	ЧтениеВозвращаемыхЗначений = Ложь;
	ЧтениеМетода               = Ложь;
	ЧтениеПримера              = Ложь;
	МетодПрочитан              = Ложь;
	
	СтруктураМетода = Новый Структура;
	СтруктураМетода.Вставить("ОписаниеМетода", "");
	СтруктураМетода.Вставить("ОписаниеПараметров", "");
	СтруктураМетода.Вставить("ОписаниеВозвращаемогоЗначения", "");
	СтруктураМетода.Вставить("ОписаниеПримера", "");
	СтруктураМетода.Вставить("СинтаксисМетода", "");
	СтруктураМетода.Вставить("ПолноеИмяОбъекта", "");
	СтруктураМетода.Вставить("Подсистема", "");
	СтруктураМетода.Вставить("Доступность", ДоступностьМетода);
	СтруктураМетода.Вставить("Размещение", "");
	СтруктураМетода.Вставить("ИмяМетода", "");
	СтруктураМетода.Вставить("СинтаксисВызова", "");
	СтруктураМетода.Вставить("ДоступностьИдентификатор", ДоступностьИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКомментарийИМетод(Строка, ТекстовыйДокумент, Итератор, Рекурсия = Ложь)
	
	Если СтрНайти(Строка, НСтр("ru = 'Параметры'") + ":") > 0 И СтрРазделить(Строка, " ", Ложь).Количество() = 2 Тогда
		ЧтениеПараметров = Истина;
		Возврат;
	ИначеЕсли СтрНайти(Строка, НСтр("ru = 'Возвращаемое значение'") + ":") > 0 Тогда
		ЧтениеПараметров           = Ложь;
		ЧтениеВозвращаемыхЗначений = Истина;
		Возврат;
	ИначеЕсли СтрНайти(Строка, НСтр("ru = '// Пример'") + ":") > 0 И СтрРазделить(Строка, " ", Ложь).Количество() = 2 Тогда
		ЧтениеПараметров           = Ложь;
		ЧтениеВозвращаемыхЗначений = Ложь;
		ЧтениеПримера = Истина;
		Возврат;
	КонецЕсли;
	
	Если Лев(Строка, 2) = "//" Тогда
		Строка = Прав(Строка, СтрДлина(Строка) - 2);
	КонецЕсли;
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка, Символы.Таб, " ");
	
	Если Не ЧтениеПараметров И Не ЧтениеВозвращаемыхЗначений И Не ЧтениеПримера Тогда
		СтруктураМетода.ОписаниеМетода =
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеМетода),
			СтруктураМетода.ОписаниеМетода + Символы.ПС + Строка,
			Строка);
	ИначеЕсли ЧтениеПараметров Тогда
		СтруктураМетода.ОписаниеПараметров = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеПараметров),
			СтруктураМетода.ОписаниеПараметров + Символы.ПС + Строка,
			Строка);
	ИначеЕсли ЧтениеВозвращаемыхЗначений Тогда
		СтруктураМетода.ОписаниеВозвращаемогоЗначения = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеВозвращаемогоЗначения),
			СтруктураМетода.ОписаниеВозвращаемогоЗначения + Символы.ПС + Строка,
			Строка);
	ИначеЕсли ЧтениеПримера Тогда
		СтруктураМетода.ОписаниеПримера = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеПримера),
			СтруктураМетода.ОписаниеПримера + Символы.ПС + Строка,
			Строка);
	КонецЕсли;
	
	Если Рекурсия Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМетода.ДлинаОписания = СтруктураМетода.ДлинаОписания + 1;
	
	Итератор = Итератор + 1;
	Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
	Пока Лев(Строка, 2) = "//" Цикл
		ПрочитатьКомментарийИМетод(Строка, ТекстовыйДокумент, Итератор, Истина);
		СтруктураМетода.ДлинаОписания = СтруктураМетода.ДлинаОписания + 1;
		Итератор = Итератор + 1;
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
	КонецЦикла;
	
	Если ПустаяСтрока(Строка) Тогда
		УстановитьПеременные();
		Возврат;
	КонецЕсли;
	
	КомментарийПрочитан = Истина;
	
	ЧтениеМетода = Истина;
	ОшибкаЧтенияМетода = Ложь;
	ПрочитатьМетод(Строка, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода);
	Если ОшибкаЧтенияМетода Тогда
		УстановитьПеременные();
		Возврат;
	КонецЕсли;
	
	СтруктураМетода.ПолноеИмяОбъекта = ПолноеИмяОбъекта;
	СтруктураМетода.Подсистема = ""; // Капралов А.А.
	
	Если СтрНайти(СтруктураМетода.ПолноеИмяОбъекта, "Переопределяемый") > 0 Тогда
		СтруктураМетода.Размещение = "Переопределение";
	Иначе
		СтруктураМетода.Размещение = "Интерфейс";
	КонецЕсли;
	
	СинтаксисВызоваМетода = СинтаксисВызоваМетода(СтруктураМетода.СинтаксисМетода, СтруктураМетода.ПолноеИмяОбъекта);
	СтруктураМетода.ИмяМетода       = СинтаксисВызоваМетода.ИмяМетода;
	СтруктураМетода.СинтаксисВызова = СинтаксисВызоваМетода.СинтаксисВызова;
	Если СинтаксисВызоваМетода.ЭтоФункция Тогда
		СтруктураМетода.СинтаксисВызова = НСтр("ru = 'Результат'") + " = " + СтруктураМетода.СинтаксисВызова;
	КонецЕсли;
	
	// Логирование.
	Если СтрНайти(СтруктураМетода.ОписаниеМетода, НСтр("ru = 'Только для внутреннего использования'")) > 0
		Или СтрНайти(СтруктураМетода.ПолноеИмяОбъекта, "Служебный") > 0 Тогда
		Объект.ЛогСозданияОписания.ОшибочноПрограммный.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров);
	КонецЕсли;
	Если СтрНайти(СтруктураМетода.ОписаниеМетода, "Устарела.") > 0 Тогда
		Объект.ЛогСозданияОписания.УстаревшиеМетоды.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров);
	КонецЕсли;
	Если СтруктураМетода.ДлинаОписания > 50 Тогда
		Объект.ЛогСозданияОписания.ДлинныйКомментарий.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров
			+ " (" + НСтр("ru = 'всего строк'") + " - "
			+ СтруктураМетода.ДлинаОписания + ")");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьМетод(Строка, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода, Рекурсия = Ложь)
	
	Если Не КомментарийПрочитан И Не ЧтениеМетода Тогда
		Возврат;
	КонецЕсли;
	
	Если (Лев(Строка, 14) = "КонецПроцедуры") Или (Лев(Строка, 12) = "КонецФункции") Тогда
		ОшибкаЧтенияМетода = Истина;
	ИначеЕсли ЧтениеМетода И СтрНайти(Строка, "Экспорт") > 0 Тогда
		СтруктураМетода.СинтаксисМетода = ?(ПустаяСтрока(СтруктураМетода.СинтаксисМетода),
			Строка,
			СтруктураМетода.СинтаксисМетода + Символы.ПС + Строка);
		МетодПрочитан = Истина;
	ИначеЕсли (Лев(Строка, 10) = "Процедура ") Или (Лев(Строка, 8) = "Функция ") Тогда
		СтруктураМетода.СинтаксисМетода = Строка;
	ИначеЕсли ЗначениеЗаполнено(СтруктураМетода.СинтаксисМетода) Тогда
		// Чтение параметров метода.
		СтруктураМетода.СинтаксисМетода = СтруктураМетода.СинтаксисМетода + Символы.ПС + Строка;
	КонецЕсли;
	
	Если Рекурсия Тогда
		Возврат;
	КонецЕсли;
	
	Пока Не МетодПрочитан Цикл
		Итератор = Итератор + 1;
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
		ПрочитатьМетод(Строка, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода, Истина);
		Если ОшибкаЧтенияМетода Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СинтаксисВызоваМетода(Знач Метод, Знач Расположение)
	
	ЭтоФункция = СтрНайти(Метод, "Функция ") > 0;
	
	Метод = СтрЗаменить(Метод, "Функция ", "");
	Метод = СтрЗаменить(Метод, "Процедура ", "");
	Метод = СтрЗаменить(Метод, " Экспорт", "");
	Метод = СтрЗаменить(Метод, ")", "");
	
	МетодИПараметры = СтрРазделить(Метод, "(");
	
	ИмяМетода		= МетодИПараметры[0];
	ПараметрыМетода	= МетодИПараметры[1];
	
	СтрокаПараметров = "";
	Если Не ПустаяСтрока(ПараметрыМетода) Тогда
		МассивПараметров = СтрРазделить(ПараметрыМетода, ",");
		Для Каждого Параметр Из МассивПараметров Цикл
			Параметр = СокрЛП(СтрЗаменить(Параметр, "Знач ", ""));
			Параметр = СокрЛП(СтрРазделить(Параметр, "=")[0]);
			СтрокаПараметров = ?(ПустаяСтрока(СтрокаПараметров), Параметр, СтрокаПараметров + ", " + Параметр);
		КонецЦикла;
	КонецЕсли;
	
	ПолноеИмяОбъектаЧастями = СтрРазделить(Расположение, ".");
	ТипОбъекта   = ПолноеИмяОбъектаЧастями[0];
	ИмяМенеджера = ИмяМенеджераОбъектаПоТипу(ТипОбъекта);
	
	СинтаксисВызоваБезПараметров = ИмяМенеджера + ПолноеИмяОбъектаЧастями[1] + "." + ИмяМетода;
	СинтаксисВызова = СинтаксисВызоваБезПараметров + "(" + СтрокаПараметров + ")";
	
	Результат = Новый Структура;
	Результат.Вставить("СинтаксисВызова", СинтаксисВызова);
	Результат.Вставить("ИмяМетода", ИмяМетода);
	Результат.Вставить("СинтаксисВызоваБезПараметров", СинтаксисВызоваБезПараметров);
	Результат.Вставить("ЭтоФункция", ЭтоФункция);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяМенеджераОбъектаПоТипу(ТипОбъекта)
	
	Если ТипОбъектаИМенеджер = Неопределено Тогда
		ТипОбъектаИМенеджер = Новый Соответствие;
		ТипОбъектаИМенеджер.Вставить("ОбщийМодуль", "");
		ТипОбъектаИМенеджер.Вставить("ПланОбмена", "ПланыОбмена.");
		ТипОбъектаИМенеджер.Вставить("ХранилищеНастроек", "ХранилищаНастроек.");
		ТипОбъектаИМенеджер.Вставить("Константа", "Константа.");
		ТипОбъектаИМенеджер.Вставить("Справочник", "Справочники.");
		ТипОбъектаИМенеджер.Вставить("Документ", "Документы.");
		ТипОбъектаИМенеджер.Вставить("ЖурналДокументов", "ЖурналыДокументов.");
		ТипОбъектаИМенеджер.Вставить("Перечисление", "Перечисления.");
		ТипОбъектаИМенеджер.Вставить("Отчет", "Отчеты.");
		ТипОбъектаИМенеджер.Вставить("Обработка", "Обработки.");
		ТипОбъектаИМенеджер.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик.");
		ТипОбъектаИМенеджер.Вставить("ПланСчетов", "ПланыСчетов.");
		ТипОбъектаИМенеджер.Вставить("ПланВидовРасчета", "ПланыВидовРасчета.");
		ТипОбъектаИМенеджер.Вставить("РегистрСведений", "РегистрыСведений.");
		ТипОбъектаИМенеджер.Вставить("РегистрНакопления", "РегистрыНакопления.");
		ТипОбъектаИМенеджер.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии.");
		ТипОбъектаИМенеджер.Вставить("РегистрРасчета", "РегистрыРасчета.");
		ТипОбъектаИМенеджер.Вставить("БизнесПроцесс", "БизнесПроцессы.");
		ТипОбъектаИМенеджер.Вставить("Задача", "Задачи.");
	КонецЕсли;
	
	Возврат ТипОбъектаИМенеджер[ТипОбъекта];
	
КонецФункции

#КонецОбласти
