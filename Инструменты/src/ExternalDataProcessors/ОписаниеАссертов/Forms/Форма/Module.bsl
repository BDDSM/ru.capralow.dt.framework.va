#Область ОписаниеПеременных

Перем СтруктураПрограммногоИнтерфейса, КомментарийПрочитан, ЧтениеПараметров, ПолноеИмяОбъекта,
	СоответствиеОбъектовПодсистемам, ЧтениеВозвращаемыхЗначений, ЧтениеПримера, СтруктураМетода, ЧтениеМетода,
	МетодПрочитан, ТипОбъектаИМенеджер, ДоступностьМетода, ДоступностьИдентификатор;

#КонецОбласти

#Область КомандныйИнтерфейсФормы

&НаКлиенте
Процедура СформироватьОписание(Команда)
	
	СформироватьОписаниеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеНаСервере()
	
	СтруктураПрограммногоИнтерфейса = Новый ТаблицаЗначений;
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("Подсистема");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ПолноеИмяОбъекта");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеМетода");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеПараметров");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеВозвращаемогоЗначения");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ОписаниеПримера");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("СинтаксисМетода");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("Доступность");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ДоступностьИдентификатор");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("Размещение");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("ИмяМетода");
	СтруктураПрограммногоИнтерфейса.Колонки.Добавить("СинтаксисВызова");
	
	ЛогСозданияОписания = Новый Структура;
	ЛогСозданияОписания.Вставить("ОшибочноПрограммный",  Новый Массив);
	ЛогСозданияОписания.Вставить("ДлинныйКомментарий",   Новый Массив);
	ЛогСозданияОписания.Вставить("ГиперссылкаВКавычках", Новый Массив);
	ЛогСозданияОписания.Вставить("НеНайденаГиперссылка", Новый СписокЗначений);
	ЛогСозданияОписания.Вставить("УстаревшиеМетоды",     Новый Массив);

	ПолноеИмяОбъекта   = "Обработка.ОписаниеАссертов.Форма";

	ПрограммныйИнтерфейс = ПрограммныйИнтерфейсМодуля(Объект.ТекстМодуля);
	Если Не ЗначениеЗаполнено(ПрограммныйИнтерфейс) Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьПрограммныйИнтерфейсМодуля(ПрограммныйИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПрограммныйИнтерфейсМодуля(ТекстМодуля)
	
	НачалоОбласти = СтрНайти(ТекстМодуля, ОбластьПрограммногоИнтерфейса());
	Если НачалоОбласти = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	НачалоОбластиАПИ = НачалоОбласти + СтрДлина(ОбластьПрограммногоИнтерфейса());
	КонецОбластиАПИ  = Неопределено;
	
	НомерВхождения = 1;
	Пока КонецОбластиАПИ = Неопределено Цикл
		НачалоОбласти = СтрНайти(ТекстМодуля, НачалоОбласти(), , НачалоОбластиАПИ, НомерВхождения);
		КонецОбласти  = СтрНайти(ТекстМодуля, КонецОбласти(), , НачалоОбластиАПИ, НомерВхождения);
		
		Если НачалоОбласти > 0 И НачалоОбласти < КонецОбласти Тогда
			НомерВхождения = НомерВхождения + 1;
		Иначе
			КонецОбластиАПИ = КонецОбласти;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьАПИ = Сред(ТекстМодуля, НачалоОбластиАПИ, КонецОбластиАПИ - НачалоОбластиАПИ);
	
	Возврат ОбластьАПИ;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПрограммныйИнтерфейсМодуля(Знач ПрограммныйИнтерфейс)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ПрограммныйИнтерфейс);
	
	УстановитьПеременные();
	Для Итератор = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
		Если ЧтениеМетода Тогда
			Если СтрНайти(Строка, "КонецПроцедуры") > 0 Или СтрНайти(Строка, "КонецФункции") > 0 Тогда
				// Чтение тела процедуры или функции завершено.
				УстановитьПеременные();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Строка, "#Область УстаревшиеПроцедурыИФункции") > 0
			Или СтрНайти(Строка, "#Область ДляВызоваИзДругихПодсистем") > 0 Тогда
			ВложенностьОбластей = 0;
			Пока Истина Цикл
				Если СтрНайти(Строка, "#Область ") > 0 Тогда
					ВложенностьОбластей = ВложенностьОбластей + 1;
				ИначеЕсли СтрНайти(Строка, "#КонецОбласти") > 0 Тогда
					ВложенностьОбластей = ВложенностьОбластей - 1;
				КонецЕсли;
				
				Если СтрНайти(Строка, "#КонецОбласти") <> 0 И ВложенностьОбластей = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Итератор = Итератор + 1;
				Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(Строка) Тогда
			Продолжить;
		ИначеЕсли Лев(Строка, 2) = "//" Тогда
			СтруктураМетода.Вставить("ДлинаОписания", 0);
			ПрочитатьКомментарийИМетод(Строка, ТекстовыйДокумент, Итератор);
			СтруктураМетода.Удалить("ДлинаОписания");
		КонецЕсли;
		Если КомментарийПрочитан И ЧтениеМетода Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПрограммногоИнтерфейса.Добавить(), СтруктураМетода);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбластьПрограммногоИнтерфейса()
	Возврат НачалоОбласти() + " " + Объект.ОбластьАссертов;
КонецФункции

&НаСервере
Функция НачалоОбласти()
	Возврат "#Область";
КонецФункции

&НаСервере
Функция КонецОбласти()
	Возврат "#КонецОбласти";
КонецФункции

&НаСервере
Процедура УстановитьПеременные()
	
	КомментарийПрочитан        = Ложь;
	ЧтениеПараметров           = Ложь;
	ЧтениеВозвращаемыхЗначений = Ложь;
	ЧтениеМетода               = Ложь;
	ЧтениеПримера              = Ложь;
	МетодПрочитан              = Ложь;
	
	СтруктураМетода = Новый Структура;
	СтруктураМетода.Вставить("ОписаниеМетода", "");
	СтруктураМетода.Вставить("ОписаниеПараметров", "");
	СтруктураМетода.Вставить("ОписаниеВозвращаемогоЗначения", "");
	СтруктураМетода.Вставить("ОписаниеПримера", "");
	СтруктураМетода.Вставить("СинтаксисМетода", "");
	СтруктураМетода.Вставить("ПолноеИмяОбъекта", "");
	СтруктураМетода.Вставить("Подсистема", "");
	СтруктураМетода.Вставить("Доступность", ДоступностьМетода);
	СтруктураМетода.Вставить("Размещение", "");
	СтруктураМетода.Вставить("ИмяМетода", "");
	СтруктураМетода.Вставить("СинтаксисВызова", "");
	СтруктураМетода.Вставить("ДоступностьИдентификатор", ДоступностьИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКомментарийИМетод(Строка, ТекстовыйДокумент, Итератор, Рекурсия = Ложь)
	
	Если СтрНайти(Строка, НСтр("ru = 'Параметры'") + ":") > 0 И СтрРазделить(Строка, " ", Ложь).Количество() = 2 Тогда
		ЧтениеПараметров = Истина;
		Возврат;
	ИначеЕсли СтрНайти(Строка, НСтр("ru = 'Возвращаемое значение'") + ":") > 0 Тогда
		ЧтениеПараметров           = Ложь;
		ЧтениеВозвращаемыхЗначений = Истина;
		Возврат;
	ИначеЕсли СтрНайти(Строка, НСтр("ru = '// Пример'") + ":") > 0 И СтрРазделить(Строка, " ", Ложь).Количество() = 2 Тогда
		ЧтениеПараметров           = Ложь;
		ЧтениеВозвращаемыхЗначений = Ложь;
		ЧтениеПримера = Истина;
		Возврат;
	КонецЕсли;
	
	Если Лев(Строка, 2) = "//" Тогда
		Строка = Прав(Строка, СтрДлина(Строка) - 2);
	КонецЕсли;
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка, Символы.Таб, " ");
	
	Если Не ЧтениеПараметров И Не ЧтениеВозвращаемыхЗначений И Не ЧтениеПримера Тогда
		СтруктураМетода.ОписаниеМетода =
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеМетода),
			СтруктураМетода.ОписаниеМетода + Символы.ПС + Строка,
			Строка);
	ИначеЕсли ЧтениеПараметров Тогда
		СтруктураМетода.ОписаниеПараметров = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеПараметров),
			СтруктураМетода.ОписаниеПараметров + Символы.ПС + Строка,
			Строка);
	ИначеЕсли ЧтениеВозвращаемыхЗначений Тогда
		СтруктураМетода.ОписаниеВозвращаемогоЗначения = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеВозвращаемогоЗначения),
			СтруктураМетода.ОписаниеВозвращаемогоЗначения + Символы.ПС + Строка,
			Строка);
	ИначеЕсли ЧтениеПримера Тогда
		СтруктураМетода.ОписаниеПримера = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеПримера),
			СтруктураМетода.ОписаниеПримера + Символы.ПС + Строка,
			Строка);
	КонецЕсли;
	
	Если Рекурсия Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМетода.ДлинаОписания = СтруктураМетода.ДлинаОписания + 1;
	
	Итератор = Итератор + 1;
	Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
	Пока Лев(Строка, 2) = "//" Цикл
		ПрочитатьКомментарийИМетод(Строка, ТекстовыйДокумент, Итератор, Истина);
		СтруктураМетода.ДлинаОписания = СтруктураМетода.ДлинаОписания + 1;
		Итератор = Итератор + 1;
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
	КонецЦикла;
	
	Если ПустаяСтрока(Строка) Тогда
		УстановитьПеременные();
		Возврат;
	КонецЕсли;
	
	КомментарийПрочитан = Истина;
	
	ЧтениеМетода = Истина;
	ОшибкаЧтенияМетода = Ложь;
	ПрочитатьМетод(Строка, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода);
	Если ОшибкаЧтенияМетода Тогда
		УстановитьПеременные();
		Возврат;
	КонецЕсли;
	
	СтруктураМетода.ПолноеИмяОбъекта = ПолноеИмяОбъекта;
	СтруктураМетода.Подсистема = ""; // Капралов А.А.
	
	Если СтрНайти(СтруктураМетода.ПолноеИмяОбъекта, "Переопределяемый") > 0 Тогда
		СтруктураМетода.Размещение = "Переопределение";
	Иначе
		СтруктураМетода.Размещение = "Интерфейс";
	КонецЕсли;
	
	СинтаксисВызоваМетода = СинтаксисВызоваМетода(СтруктураМетода.СинтаксисМетода, СтруктураМетода.ПолноеИмяОбъекта);
	СтруктураМетода.ИмяМетода       = СинтаксисВызоваМетода.ИмяМетода;
	СтруктураМетода.СинтаксисВызова = СинтаксисВызоваМетода.СинтаксисВызова;
	Если СинтаксисВызоваМетода.ЭтоФункция Тогда
		СтруктураМетода.СинтаксисВызова = НСтр("ru = 'Результат'") + " = " + СтруктураМетода.СинтаксисВызова;
	КонецЕсли;
	
	// Логирование.
	Если СтрНайти(СтруктураМетода.ОписаниеМетода, НСтр("ru = 'Только для внутреннего использования'")) > 0
		Или СтрНайти(СтруктураМетода.ПолноеИмяОбъекта, "Служебный") > 0 Тогда
		Объект.ЛогСозданияОписания.ОшибочноПрограммный.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров);
	КонецЕсли;
	Если СтрНайти(СтруктураМетода.ОписаниеМетода, "Устарела.") > 0 Тогда
		Объект.ЛогСозданияОписания.УстаревшиеМетоды.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров);
	КонецЕсли;
	Если СтруктураМетода.ДлинаОписания > 50 Тогда
		Объект.ЛогСозданияОписания.ДлинныйКомментарий.Добавить(СинтаксисВызоваМетода.СинтаксисВызоваБезПараметров
			+ " (" + НСтр("ru = 'всего строк'") + " - "
			+ СтруктураМетода.ДлинаОписания + ")");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьМетод(Строка, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода, Рекурсия = Ложь)
	
	Если Не КомментарийПрочитан И Не ЧтениеМетода Тогда
		Возврат;
	КонецЕсли;
	
	Если (Лев(Строка, 14) = "КонецПроцедуры") Или (Лев(Строка, 12) = "КонецФункции") Тогда
		ОшибкаЧтенияМетода = Истина;
	ИначеЕсли ЧтениеМетода И СтрНайти(Строка, "Экспорт") > 0 Тогда
		СтруктураМетода.СинтаксисМетода = ?(ПустаяСтрока(СтруктураМетода.СинтаксисМетода),
			Строка,
			СтруктураМетода.СинтаксисМетода + Символы.ПС + Строка);
		МетодПрочитан = Истина;
	ИначеЕсли (Лев(Строка, 10) = "Процедура ") Или (Лев(Строка, 8) = "Функция ") Тогда
		СтруктураМетода.СинтаксисМетода = Строка;
	ИначеЕсли ЗначениеЗаполнено(СтруктураМетода.СинтаксисМетода) Тогда
		// Чтение параметров метода.
		СтруктураМетода.СинтаксисМетода = СтруктураМетода.СинтаксисМетода + Символы.ПС + Строка;
	КонецЕсли;
	
	Если Рекурсия Тогда
		Возврат;
	КонецЕсли;
	
	Пока Не МетодПрочитан Цикл
		Итератор = Итератор + 1;
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
		ПрочитатьМетод(Строка, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода, Истина);
		Если ОшибкаЧтенияМетода Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СинтаксисВызоваМетода(Знач Метод, Знач Расположение)
	
	ЭтоФункция = СтрНайти(Метод, "Функция ") > 0;
	
	Метод = СтрЗаменить(Метод, "Функция ", "");
	Метод = СтрЗаменить(Метод, "Процедура ", "");
	Метод = СтрЗаменить(Метод, " Экспорт", "");
	Метод = СтрЗаменить(Метод, ")", "");
	
	МетодИПараметры = СтрРазделить(Метод, "(");
	
	ИмяМетода		= МетодИПараметры[0];
	ПараметрыМетода	= МетодИПараметры[1];
	
	СтрокаПараметров = "";
	Если Не ПустаяСтрока(ПараметрыМетода) Тогда
		МассивПараметров = СтрРазделить(ПараметрыМетода, ",");
		Для Каждого Параметр Из МассивПараметров Цикл
			Параметр = СокрЛП(СтрЗаменить(Параметр, "Знач ", ""));
			Параметр = СокрЛП(СтрРазделить(Параметр, "=")[0]);
			СтрокаПараметров = ?(ПустаяСтрока(СтрокаПараметров), Параметр, СтрокаПараметров + ", " + Параметр);
		КонецЦикла;
	КонецЕсли;
	
	ПолноеИмяОбъектаЧастями = СтрРазделить(Расположение, ".");
	ТипОбъекта   = ПолноеИмяОбъектаЧастями[0];
	ИмяМенеджера = ИмяМенеджераОбъектаПоТипу(ТипОбъекта);
	
	СинтаксисВызоваБезПараметров = ИмяМенеджера + ПолноеИмяОбъектаЧастями[1] + "." + ИмяМетода;
	СинтаксисВызова = СинтаксисВызоваБезПараметров + "(" + СтрокаПараметров + ")";
	
	Результат = Новый Структура;
	Результат.Вставить("СинтаксисВызова", СинтаксисВызова);
	Результат.Вставить("ИмяМетода", ИмяМетода);
	Результат.Вставить("СинтаксисВызоваБезПараметров", СинтаксисВызоваБезПараметров);
	Результат.Вставить("ЭтоФункция", ЭтоФункция);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяМенеджераОбъектаПоТипу(ТипОбъекта)
	
	Если ТипОбъектаИМенеджер = Неопределено Тогда
		ТипОбъектаИМенеджер = Новый Соответствие;
		ТипОбъектаИМенеджер.Вставить("ОбщийМодуль", "");
		ТипОбъектаИМенеджер.Вставить("ПланОбмена", "ПланыОбмена.");
		ТипОбъектаИМенеджер.Вставить("ХранилищеНастроек", "ХранилищаНастроек.");
		ТипОбъектаИМенеджер.Вставить("Константа", "Константа.");
		ТипОбъектаИМенеджер.Вставить("Справочник", "Справочники.");
		ТипОбъектаИМенеджер.Вставить("Документ", "Документы.");
		ТипОбъектаИМенеджер.Вставить("ЖурналДокументов", "ЖурналыДокументов.");
		ТипОбъектаИМенеджер.Вставить("Перечисление", "Перечисления.");
		ТипОбъектаИМенеджер.Вставить("Отчет", "Отчеты.");
		ТипОбъектаИМенеджер.Вставить("Обработка", "Обработки.");
		ТипОбъектаИМенеджер.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик.");
		ТипОбъектаИМенеджер.Вставить("ПланСчетов", "ПланыСчетов.");
		ТипОбъектаИМенеджер.Вставить("ПланВидовРасчета", "ПланыВидовРасчета.");
		ТипОбъектаИМенеджер.Вставить("РегистрСведений", "РегистрыСведений.");
		ТипОбъектаИМенеджер.Вставить("РегистрНакопления", "РегистрыНакопления.");
		ТипОбъектаИМенеджер.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии.");
		ТипОбъектаИМенеджер.Вставить("РегистрРасчета", "РегистрыРасчета.");
		ТипОбъектаИМенеджер.Вставить("БизнесПроцесс", "БизнесПроцессы.");
		ТипОбъектаИМенеджер.Вставить("Задача", "Задачи.");
	КонецЕсли;
	
	Возврат ТипОбъектаИМенеджер[ТипОбъекта];
	
КонецФункции

#КонецОбласти
